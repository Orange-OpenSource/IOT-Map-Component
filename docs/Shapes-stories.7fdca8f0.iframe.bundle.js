"use strict";(self.webpackChunkIOT_Map_Component=self.webpackChunkIOT_Map_Component||[]).push([[945],{"./src/stories/Shapes.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Shapes:()=>Shapes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/iotMapManager/dist/index.js");__webpack_require__("./src/stories/stories.css");let markersList=[{id:"s1",location:[44.895,4.87],shape:{type:0,color:"#FFCC00",anchored:!1,plain:!1,accuracy:150,direction:0}}];const __WEBPACK_DEFAULT_EXPORT__={title:"Shapes",parameters:{layout:"fullscreen"}};function update(){let config=new iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__.IotMapConfig,mapManager=new iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__.IotMapManager(config),markerManager=new iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__.IotMapMarkerManager(mapManager,config);mapManager.init("iotMap"),markerManager.addMarkers(markersList),removeEventListener("DOMContentLoaded",update)}const Shapes={argTypes:{locationLatitude:{control:{step:.001,type:"number",value:markersList[0].location[1]},name:"location.latitude"},locationLongitude:{control:{step:.001,type:"number",value:markersList[0].location[0]},name:"location.longitude"},shapeAccuracy:{control:{step:20,type:"number",value:markersList[0].shape.accuracy},name:"shape.accuracy"},shapeAnchored:{control:"boolean",name:"shape.anchored",value:markersList[0].shape.anchored},shapeColor:{control:{type:"color",value:markersList[0].shape.color},name:"shape.color"},shapeDirection:{control:{max:360,min:0,step:10,type:"range",value:markersList[0].shape.direction},name:"shape.direction"},shapePlain:{control:"boolean",name:"shape.plain",value:markersList[0].shape.plain},shapeType:{control:"radio",name:"shape.type",options:["Circle","Square"],value:0===markersList[0].shape.type?"Circle":"Square"}},render:args=>(void 0!==args.locationLatitude&&(markersList[0].location[1]=args.locationLatitude),void 0!==args.locationLongitude&&(markersList[0].location[0]=args.locationLongitude),void 0!==args.shapeAccuracy&&(markersList[0].shape.accuracy=args.shapeAccuracy),void 0!==args.shapeAnchored&&(markersList[0].shape.anchored=args.shapeAnchored),void 0!==args.shapeColor&&(markersList[0].shape.color=args.shapeColor),void 0!==args.shapeDirection&&(markersList[0].shape.direction=args.shapeDirection),void 0!==args.shapePlain&&(markersList[0].shape.plain=args.shapePlain),void 0!==args.shapeType&&(markersList[0].shape.type="Circle"===args.shapeType?0:1),addEventListener("DOMContentLoaded",update),'<div id="iotMap" style="width: 1280px; height: 720px"></div>')},__namedExportsOrder=["Shapes"];Shapes.parameters={...Shapes.parameters,docs:{...Shapes.parameters?.docs,source:{originalSource:'{\n  argTypes: {\n    locationLatitude: {\n      control: {\n        step: 0.001,\n        type: "number",\n        value: markersList[0].location[1]\n      },\n      name: "location.latitude"\n    },\n    locationLongitude: {\n      control: {\n        step: 0.001,\n        type: "number",\n        value: markersList[0].location[0]\n      },\n      name: "location.longitude"\n    },\n    shapeAccuracy: {\n      control: {\n        step: 20,\n        type: "number",\n        value: markersList[0].shape.accuracy\n      },\n      name: "shape.accuracy"\n    },\n    shapeAnchored: {\n      control: "boolean",\n      name: "shape.anchored",\n      value: markersList[0].shape.anchored\n    },\n    shapeColor: {\n      control: {\n        type: "color",\n        value: markersList[0].shape.color\n      },\n      name: "shape.color"\n    },\n    shapeDirection: {\n      control: {\n        max: 360,\n        min: 0,\n        step: 10,\n        type: "range",\n        value: markersList[0].shape.direction\n      },\n      name: "shape.direction"\n    },\n    shapePlain: {\n      control: "boolean",\n      name: "shape.plain",\n      value: markersList[0].shape.plain\n    },\n    shapeType: {\n      control: "radio",\n      name: "shape.type",\n      options: ["Circle", "Square"],\n      value: markersList[0].shape.type === 0 ? "Circle" : "Square"\n    }\n  },\n  render: args => {\n    if (undefined !== args.locationLatitude) {\n      markersList[0].location[1] = args.locationLatitude;\n    }\n    if (undefined !== args.locationLongitude) {\n      markersList[0].location[0] = args.locationLongitude;\n    }\n    if (undefined !== args.shapeAccuracy) {\n      markersList[0].shape.accuracy = args.shapeAccuracy;\n    }\n    if (undefined !== args.shapeAnchored) {\n      markersList[0].shape.anchored = args.shapeAnchored;\n    }\n    if (undefined !== args.shapeColor) {\n      markersList[0].shape.color = args.shapeColor;\n    }\n    if (undefined !== args.shapeDirection) {\n      markersList[0].shape.direction = args.shapeDirection;\n    }\n    if (undefined !== args.shapePlain) {\n      markersList[0].shape.plain = args.shapePlain;\n    }\n    if (undefined !== args.shapeType) {\n      markersList[0].shape.type = args.shapeType === "Circle" ? 0 : 1;\n    }\n    addEventListener("DOMContentLoaded", update);\n    return template;\n  }\n}',...Shapes.parameters?.docs?.source}}}}}]);