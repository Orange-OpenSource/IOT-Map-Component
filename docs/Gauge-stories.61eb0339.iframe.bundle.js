"use strict";(self.webpackChunkIOT_Map_Component=self.webpackChunkIOT_Map_Component||[]).push([[432],{"./src/stories/Gauge.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Gauge:()=>Gauge,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/iotMapManager/dist/index.js");__webpack_require__("./src/stories/stories.css");let markersList=[{id:"s1",location:[44.895,4.87],shape:{anchored:!1,color:"red",percent:15}}];const __WEBPACK_DEFAULT_EXPORT__={title:"Gauge",parameters:{layout:"fullscreen"}};function update(){let config=new iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__.IotMapConfig,mapManager=new iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__.IotMapManager(config),markerManager=new iotmapmanager_dist__WEBPACK_IMPORTED_MODULE_0__.IotMapMarkerManager(mapManager,config);mapManager.init("iotMap"),markerManager.addMarkers(markersList),removeEventListener("DOMContentLoaded",update)}const Gauge={argTypes:{locationLatitude:{control:{step:.001,type:"number",value:markersList[0].location[1]},name:"location.latitude"},locationLongitude:{control:{step:.001,type:"number",value:markersList[0].location[0]},name:"location.longitude"},shapeAnchored:{control:"boolean",name:"shape.anchored",value:markersList[0].shape.anchored},shapeColor:{control:{type:"color",value:markersList[0].shape.color},name:"shape.color"},shapePercent:{control:{max:100,min:0,step:1,type:"range",value:markersList[0].shape.percent},name:"shape.percent"}},render:args=>(void 0!==args.locationLatitude&&(markersList[0].location[1]=args.locationLatitude),void 0!==args.locationLongitude&&(markersList[0].location[0]=args.locationLongitude),void 0!==args.shapeAnchored&&(markersList[0].shape.anchored=args.shapeAnchored),void 0!==args.shapeColor&&(markersList[0].shape.color=args.shapeColor),void 0!==args.shapePercent&&(markersList[0].shape.percent=args.shapePercent),addEventListener("DOMContentLoaded",update),'<div id="iotMap" style="width: 1280px; height: 720px"></div>')},__namedExportsOrder=["Gauge"];Gauge.parameters={...Gauge.parameters,docs:{...Gauge.parameters?.docs,source:{originalSource:'{\n  argTypes: {\n    locationLatitude: {\n      control: {\n        step: 0.001,\n        type: "number",\n        value: markersList[0].location[1]\n      },\n      name: "location.latitude"\n    },\n    locationLongitude: {\n      control: {\n        step: 0.001,\n        type: "number",\n        value: markersList[0].location[0]\n      },\n      name: "location.longitude"\n    },\n    shapeAnchored: {\n      control: "boolean",\n      name: "shape.anchored",\n      value: markersList[0].shape.anchored\n    },\n    shapeColor: {\n      control: {\n        type: "color",\n        value: markersList[0].shape.color\n      },\n      name: "shape.color"\n    },\n    shapePercent: {\n      control: {\n        max: 100,\n        min: 0,\n        step: 1,\n        type: "range",\n        value: markersList[0].shape.percent\n      },\n      name: "shape.percent"\n    }\n  },\n  render: args => {\n    if (undefined !== args.locationLatitude) {\n      markersList[0].location[1] = args.locationLatitude;\n    }\n    if (undefined !== args.locationLongitude) {\n      markersList[0].location[0] = args.locationLongitude;\n    }\n    if (undefined !== args.shapeAnchored) {\n      markersList[0].shape.anchored = args.shapeAnchored;\n    }\n    if (undefined !== args.shapeColor) {\n      markersList[0].shape.color = args.shapeColor;\n    }\n    if (undefined !== args.shapePercent) {\n      markersList[0].shape.percent = args.shapePercent;\n    }\n    addEventListener("DOMContentLoaded", update);\n    return template;\n  }\n}',...Gauge.parameters?.docs?.source}}}}}]);